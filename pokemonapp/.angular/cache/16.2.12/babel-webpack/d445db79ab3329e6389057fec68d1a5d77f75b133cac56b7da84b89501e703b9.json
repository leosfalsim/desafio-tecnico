{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Validators } from '@angular/forms';\nimport { SnackBarComponent } from '../snackBar/snackBar.component';\nlet EditDeckFormComponent = class EditDeckFormComponent {\n  constructor($cardsService, $editDeckFormService, formBuilder, _snackBar, router, dialogRef) {\n    this.$cardsService = $cardsService;\n    this.$editDeckFormService = $editDeckFormService;\n    this.formBuilder = formBuilder;\n    this._snackBar = _snackBar;\n    this.router = router;\n    this.dialogRef = dialogRef;\n    this.cards = [];\n    this.displayedColumns = ['images', 'name', 'supertype', 'level', 'hp', 'rarity', 'select'];\n    this.dataSource = new MatTableDataSource();\n    this.numberOfCardsOnDeck = 0;\n    this.numberOfCardsWithSameName = 0;\n    this.filterValue = '';\n    this.durationInSeconds = 5;\n    this.isLoading = true;\n  }\n  ngOnInit() {\n    this.getAllCards();\n    this.createForm();\n  }\n  getAllCards() {\n    this.$cardsService.getAllCards().subscribe({\n      next: response => {\n        this.cards = response.data;\n        if (this.cards) {\n          this.updateDataSource(this.cards);\n        }\n        this.isLoading = false;\n      },\n      error: error => {\n        this.openSnackBar('Error retrieving Cards');\n      }\n    });\n  }\n  createForm() {\n    this.form = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(3)]]\n    });\n  }\n  applyFilter(event) {\n    this.dataSource.filterPredicate = function (data, filter) {\n      return data.name.toLowerCase().includes(filter);\n    };\n    this.filterValue = event.target.value;\n    this.filterValue = this.filterValue.trim().toLowerCase();\n    this.dataSource.filter = this.filterValue;\n  }\n  setSelectionFalseToCards(cards) {\n    cards.map(c => {\n      c.isCardSelected = false;\n    });\n    return cards;\n  }\n  addCardToDeck(card) {\n    if (this.checkIfHas4CardsWithSameNameAdded(card)) return;\n    this.cards.map(c => {\n      if (card.id === c.id) {\n        c.isCardSelected = !c.isCardSelected;\n      }\n    });\n    this.numberOfCardsOnDeck = this.cards.filter(c => c.isCardSelected).length;\n    this.updateDataSource(this.cards);\n  }\n  checkIfHas4CardsWithSameNameAdded(card) {\n    this.numberOfCardsWithSameName = this.cards.filter(c => c.isCardSelected && card.name === c.name).length;\n    if (this.numberOfCardsWithSameName >= 4 && !card.isCardSelected) {\n      this.openSnackBar('You can only add 4 cards with the same name!');\n      return true;\n    }\n    return false;\n  }\n  updateDataSource(cards) {\n    this.dataSource = new MatTableDataSource(cards);\n    this.dataSource.filter = this.filterValue;\n  }\n  createDeck() {\n    let deck = {\n      cards: this.cards.filter(c => c.isCardSelected === true),\n      name: this.form.value.name,\n      userEmail: localStorage.getItem('login') || ''\n    };\n    this.$newDeckFormService.createNewDeck(deck).subscribe({\n      next: response => {\n        this.openSnackBar('Deck of Cards created with success!');\n        this.closeDialog();\n        //this.router.navigate(['dashboard/deckofcards']);\n        let currentUrl = this.router.url;\n        this.router.navigateByUrl('/', {\n          skipLocationChange: true\n        }).then(() => {\n          this.router.navigate([currentUrl]);\n        });\n      },\n      error: error => {\n        this.openSnackBar('Error when creating a Deck of Cards');\n      }\n    });\n  }\n  openSnackBar(message) {\n    this._snackBar.openFromComponent(SnackBarComponent, {\n      duration: this.durationInSeconds * 1000,\n      data: {\n        message: message\n      }\n    });\n  }\n  closeDialog() {\n    this.dialogRef.close();\n  }\n};\nEditDeckFormComponent = __decorate([Component({\n  selector: 'app-edit-deck-form',\n  templateUrl: './edit-deck-form.component.html',\n  styleUrls: ['./edit-deck-form.component.scss']\n})], EditDeckFormComponent);\nexport { EditDeckFormComponent };","map":{"version":3,"names":["Component","MatTableDataSource","Validators","SnackBarComponent","EditDeckFormComponent","constructor","$cardsService","$editDeckFormService","formBuilder","_snackBar","router","dialogRef","cards","displayedColumns","dataSource","numberOfCardsOnDeck","numberOfCardsWithSameName","filterValue","durationInSeconds","isLoading","ngOnInit","getAllCards","createForm","subscribe","next","response","data","updateDataSource","error","openSnackBar","form","group","name","required","minLength","applyFilter","event","filterPredicate","filter","toLowerCase","includes","target","value","trim","setSelectionFalseToCards","map","c","isCardSelected","addCardToDeck","card","checkIfHas4CardsWithSameNameAdded","id","length","createDeck","deck","userEmail","localStorage","getItem","$newDeckFormService","createNewDeck","closeDialog","currentUrl","url","navigateByUrl","skipLocationChange","then","navigate","message","openFromComponent","duration","close","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Arquivos de Programas\\SoftwareFactory\\desafio-tecnico\\pokemonapp\\src\\app\\components\\edit-deck-form\\edit-deck-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Data, ICard } from 'src/app/interfaces/Icard';\r\n\r\nimport { CardService } from '../cards/service/card.service';\r\n\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Ideck } from 'src/app/interfaces/Ideck';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { SnackBarComponent } from '../snackBar/snackBar.component';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-edit-deck-form',\r\n  templateUrl: './edit-deck-form.component.html',\r\n  styleUrls: ['./edit-deck-form.component.scss']\r\n})\r\n\r\nexport class EditDeckFormComponent implements OnInit {\r\n\r\n  public cards: Array<Data> = [];\r\n\r\n  public displayedColumns: string[] = ['images', 'name', 'supertype', 'level', 'hp', 'rarity', 'select'];\r\n  public dataSource = new MatTableDataSource<Data>();\r\n\r\n  public form!: FormGroup;\r\n\r\n  public numberOfCardsOnDeck: number = 0;\r\n  public numberOfCardsWithSameName: number = 0;\r\n\r\n  public filterValue: string = '';\r\n\r\n  public durationInSeconds: number = 5;\r\n\r\n  public isLoading: boolean = true;\r\n\r\n  constructor(\r\n    private $cardsService: CardService,\r\n    private $editDeckFormService: EditDeckFormService,\r\n    private formBuilder: FormBuilder,\r\n    private _snackBar: MatSnackBar,\r\n    private router: Router,\r\n    private dialogRef: MatDialogRef<EditDeckFormComponent>\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getAllCards();\r\n    this.createForm();\r\n  }\r\n\r\n  getAllCards() {\r\n    this.$cardsService.getAllCards().subscribe({\r\n      next: (response: ICard) => {\r\n        this.cards = response.data;\r\n        if(this.cards) {\r\n          this.updateDataSource(this.cards);\r\n        }\r\n        this.isLoading = false;\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.openSnackBar('Error retrieving Cards');\r\n      }\r\n    });\r\n  }\r\n\r\n  createForm() {\r\n    this.form = this.formBuilder.group({\r\n      name: ['', [Validators.required, Validators.minLength(3)]],\r\n    });\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    this.dataSource.filterPredicate = function(data, filter: string): boolean {\r\n      return data.name.toLowerCase().includes(filter);\r\n    };\r\n\r\n    this.filterValue = (event.target as HTMLInputElement).value;\r\n    this.filterValue = this.filterValue.trim().toLowerCase();\r\n    this.dataSource.filter = this.filterValue;\r\n  }\r\n\r\n  setSelectionFalseToCards(cards: Array<Data>) {\r\n    cards.map((c: Data) => {\r\n      c.isCardSelected = false;\r\n    });\r\n    return cards;\r\n  }\r\n\r\n  addCardToDeck(card: Data) {\r\n\r\n    if(this.checkIfHas4CardsWithSameNameAdded(card))\r\n    return;\r\n\r\n    this.cards.map((c: Data) => {\r\n      if(card.id === c.id) {\r\n        c.isCardSelected = !c.isCardSelected;\r\n      }\r\n    });\r\n\r\n    this.numberOfCardsOnDeck = this.cards.filter((c: Data) => c.isCardSelected).length;\r\n\r\n    this.updateDataSource(this.cards);\r\n  }\r\n\r\n  checkIfHas4CardsWithSameNameAdded(card: Data): boolean {\r\n    this.numberOfCardsWithSameName = this.cards.filter((c: Data) => c.isCardSelected && card.name === c.name).length;\r\n    if(this.numberOfCardsWithSameName >= 4 && !card.isCardSelected) {\r\n      this.openSnackBar('You can only add 4 cards with the same name!');\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateDataSource(cards: Array<Data>) {\r\n    this.dataSource = new MatTableDataSource<Data>(cards);\r\n    this.dataSource.filter = this.filterValue;\r\n  }\r\n\r\n  createDeck() {\r\n    let deck: Ideck = {\r\n      cards: this.cards.filter((c: Data) => c.isCardSelected === true),\r\n      name: this.form.value.name,\r\n      userEmail: localStorage.getItem('login') || ''\r\n    };\r\n\r\n    this.$newDeckFormService.createNewDeck(deck).subscribe({\r\n      next: (response: any) => {\r\n        this.openSnackBar('Deck of Cards created with success!');\r\n        this.closeDialog();\r\n        //this.router.navigate(['dashboard/deckofcards']);\r\n\r\n        let currentUrl = this.router.url;\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n            this.router.navigate([currentUrl]);\r\n        });\r\n\r\n\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.openSnackBar('Error when creating a Deck of Cards');\r\n      }\r\n    });\r\n  }\r\n\r\n  openSnackBar(message: string) {\r\n    this._snackBar.openFromComponent(SnackBarComponent, {\r\n      duration: this.durationInSeconds * 1000,\r\n      data: {message: message}\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}