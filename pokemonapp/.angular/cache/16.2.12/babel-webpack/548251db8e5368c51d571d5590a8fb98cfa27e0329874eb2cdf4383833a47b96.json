{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { SnackBarComponent } from '../snackBar/snack-bar.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./service/register.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/card\";\nfunction RegisterComponent_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The field shouldn't be empty! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Provide a valid e-mail! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The field shouldn't be empty! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The min of characters is 3! \");\n    i0.ɵɵelementEnd();\n  }\n}\nlet RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor($registerService, formBuilder, _snackBar) {\n      this.$registerService = $registerService;\n      this.formBuilder = formBuilder;\n      this._snackBar = _snackBar;\n      this.durationInSeconds = 5;\n    }\n    ngOnInit() {\n      this.createForm();\n    }\n    createForm() {\n      const EMAILPATTERN = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n      this.form = this.formBuilder.group({\n        email: ['', [Validators.required, Validators.pattern(EMAILPATTERN)]],\n        password: ['', [Validators.required, Validators.minLength(3)]]\n      });\n    }\n    createLogin() {\n      let login = {\n        email: this.form.value.email,\n        password: this.form.value.password\n      };\n      this.$registerService.createLogin(login).subscribe({\n        next: response => {\n          this.form.reset();\n          this.openSnackBar('Login created with succesful!');\n          window.location.reload();\n        },\n        error: error => {\n          this.openSnackBar('Error creating login');\n        }\n      });\n    }\n    openSnackBar(message) {\n      this._snackBar.openFromComponent(SnackBarComponent, {\n        duration: this.durationInSeconds * 1000,\n        data: {\n          message: message\n        }\n      });\n    }\n    static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n      return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.RegisterService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MatSnackBar));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 14,\n      vars: 6,\n      consts: [[1, \"mt-5\", \"sm:mx-auto\", \"sm:w-full\", \"sm:max-w-sm\"], [3, \"formGroup\"], [\"matInput\", \"\", \"placeholder\", \"E-mail\", \"id\", \"email\", \"formControlName\", \"email\", \"type\", \"text\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"id\", \"password\", \"formControlName\", \"password\", \"type\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"]],\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\")(2, \"mat-card-content\")(3, \"form\", 1)(4, \"mat-form-field\");\n          i0.ɵɵelement(5, \"input\", 2);\n          i0.ɵɵtemplate(6, RegisterComponent_mat_error_6_Template, 2, 0, \"mat-error\", 3);\n          i0.ɵɵtemplate(7, RegisterComponent_mat_error_7_Template, 2, 0, \"mat-error\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"mat-form-field\");\n          i0.ɵɵelement(9, \"input\", 4);\n          i0.ɵɵtemplate(10, RegisterComponent_mat_error_10_Template, 2, 0, \"mat-error\", 3);\n          i0.ɵɵtemplate(11, RegisterComponent_mat_error_11_Template, 2, 0, \"mat-error\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_12_listener() {\n            return ctx.createLogin();\n          });\n          i0.ɵɵtext(13, \"Register\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          let tmp_3_0;\n          let tmp_4_0;\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.form.get(\"email\")) == null ? null : tmp_1_0.dirty) && ((tmp_1_0 = ctx.form.get(\"email\")) == null ? null : tmp_1_0.hasError(\"required\")));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.form.get(\"email\")) == null ? null : tmp_2_0.dirty) && ((tmp_2_0 = ctx.form.get(\"email\")) == null ? null : tmp_2_0.hasError(\"pattern\")));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.form.get(\"password\")) == null ? null : tmp_3_0.dirty) && ((tmp_3_0 = ctx.form.get(\"password\")) == null ? null : tmp_3_0.hasError(\"required\")));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.form.get(\"password\")) == null ? null : tmp_4_0.dirty) && ((tmp_4_0 = ctx.form.get(\"password\")) == null ? null : tmp_4_0.hasError(\"minlength\")));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", !ctx.form.valid);\n        }\n      },\n      dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i5.MatButton, i6.MatFormField, i6.MatError, i7.MatInput, i8.MatCard, i8.MatCardContent],\n      styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%}  .mat-mdc-card{--mdc-elevated-card-container-elevation: none !important}  .mdc-text-field{background-color:#fff!important;border-radius:0!important}\"]\n    });\n  }\n  return RegisterComponent;\n})();\nexport { RegisterComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}