{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Validators } from '@angular/forms';\nimport { SnackBarComponent } from '../snackBar/snackBar.component';\nlet NewdeckFormComponent = class NewdeckFormComponent {\n  constructor($cardsService, $newDeckFormService, formBuilder, _snackBar) {\n    this.$cardsService = $cardsService;\n    this.$newDeckFormService = $newDeckFormService;\n    this.formBuilder = formBuilder;\n    this._snackBar = _snackBar;\n    this.cards = [];\n    this.displayedColumns = ['images', 'name', 'supertype', 'level', 'hp', 'rarity', 'select'];\n    this.dataSource = new MatTableDataSource();\n    this.numberOfCardsOnDeck = 0;\n    this.numberOfCardsWithSameName = 0;\n    this.filterValue = '';\n    this.durationInSeconds = 5;\n  }\n  ngOnInit() {\n    this.dataSource = new MatTableDataSource();\n    this.cards = this.$cardsService.allCards;\n    this.updateDataSource(this.cards);\n    this.createForm();\n  }\n  createForm() {\n    this.form = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(3)]]\n    });\n  }\n  applyFilter(event) {\n    this.dataSource.filterPredicate = function (data, filter) {\n      return data.name.toLowerCase().includes(filter);\n    };\n    this.filterValue = event.target.value;\n    this.filterValue = this.filterValue.trim().toLowerCase();\n    this.dataSource.filter = this.filterValue;\n  }\n  setSelectionFalseToCards(cards) {\n    cards.map(c => {\n      c.isCardSelected = false;\n    });\n    return cards;\n  }\n  addCardToDeck(card) {\n    if (this.checkIfHas4CardsWithSameNameAdded(card)) return;\n    this.cards.map(c => {\n      if (card.id === c.id) {\n        c.isCardSelected = !c.isCardSelected;\n      }\n    });\n    this.numberOfCardsOnDeck = this.cards.filter(c => c.isCardSelected).length;\n    this.updateDataSource(this.cards);\n  }\n  checkIfHas4CardsWithSameNameAdded(card) {\n    this.numberOfCardsWithSameName = this.cards.filter(c => c.isCardSelected && card.name === c.name).length;\n    if (this.numberOfCardsWithSameName >= 4 && !card.isCardSelected) {\n      this.openSnackBar('You can only add 4 cards with the same name!');\n      return true;\n    }\n    return false;\n  }\n  updateDataSource(cards) {\n    // this.dataSource = new MatTableDataSource<Data>();\n    // this.dataSource.data = this.cards;\n    this.dataSource = new MatTableDataSource(cards);\n    this.dataSource.filter = this.filterValue;\n  }\n  createDeck() {\n    let deck = {\n      cards: this.cards.filter(c => c.isCardSelected === true),\n      name: this.form.value.name,\n      userEmail: localStorage.getItem('login') || ''\n    };\n    this.$newDeckFormService.createNewDeck(deck).subscribe(response => {\n      console.log(response);\n    });\n  }\n  openSnackBar(message) {\n    this._snackBar.openFromComponent(SnackBarComponent, {\n      duration: this.durationInSeconds * 1000,\n      data: {\n        message: message\n      }\n    });\n  }\n};\nNewdeckFormComponent = __decorate([Component({\n  selector: 'app-newdeckform',\n  templateUrl: './newdeckform.component.html',\n  styleUrls: ['./newdeckform.component.scss']\n})], NewdeckFormComponent);\nexport { NewdeckFormComponent };","map":{"version":3,"names":["Component","MatTableDataSource","Validators","SnackBarComponent","NewdeckFormComponent","constructor","$cardsService","$newDeckFormService","formBuilder","_snackBar","cards","displayedColumns","dataSource","numberOfCardsOnDeck","numberOfCardsWithSameName","filterValue","durationInSeconds","ngOnInit","allCards","updateDataSource","createForm","form","group","name","required","minLength","applyFilter","event","filterPredicate","data","filter","toLowerCase","includes","target","value","trim","setSelectionFalseToCards","map","c","isCardSelected","addCardToDeck","card","checkIfHas4CardsWithSameNameAdded","id","length","openSnackBar","createDeck","deck","userEmail","localStorage","getItem","createNewDeck","subscribe","response","console","log","message","openFromComponent","duration","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Arquivos de Programas\\SoftwareFactory\\desafio-tecnico\\pokemonapp\\src\\app\\components\\newdeckform\\newdeckform.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Data } from 'src/app/interfaces/Icard';\r\n\r\nimport { CardService } from '../cards/service/card.service';\r\n\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Ideck } from 'src/app/interfaces/Ideck';\r\nimport { NewDeckFormService } from './service/newdeckform.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { SnackBarComponent } from '../snackBar/snackBar.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-newdeckform',\r\n  templateUrl: './newdeckform.component.html',\r\n  styleUrls: ['./newdeckform.component.scss']\r\n})\r\n\r\nexport class NewdeckFormComponent implements OnInit {\r\n\r\n  public cards: Array<Data> = [];\r\n\r\n  public displayedColumns: string[] = ['images', 'name', 'supertype', 'level', 'hp', 'rarity', 'select'];\r\n  public dataSource = new MatTableDataSource<Data>();\r\n\r\n  public form!: FormGroup;\r\n\r\n  public numberOfCardsOnDeck: number = 0;\r\n  public numberOfCardsWithSameName: number = 0;\r\n\r\n  public filterValue: string = '';\r\n\r\n  public durationInSeconds: number = 5;\r\n\r\n  constructor(\r\n    private $cardsService: CardService,\r\n    private $newDeckFormService: NewDeckFormService,\r\n    private formBuilder: FormBuilder,\r\n    private _snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.dataSource = new MatTableDataSource<Data>();\r\n    this.cards = this.$cardsService.allCards;\r\n    this.updateDataSource(this.cards);\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.form = this.formBuilder.group({\r\n      name: ['', [Validators.required, Validators.minLength(3)]],\r\n    });\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    this.dataSource.filterPredicate = function(data, filter: string): boolean {\r\n      return data.name.toLowerCase().includes(filter);\r\n    };\r\n\r\n    this.filterValue = (event.target as HTMLInputElement).value;\r\n    this.filterValue = this.filterValue.trim().toLowerCase();\r\n    this.dataSource.filter = this.filterValue;\r\n  }\r\n\r\n  setSelectionFalseToCards(cards: Array<Data>) {\r\n    cards.map((c: Data) => {\r\n      c.isCardSelected = false;\r\n    });\r\n    return cards;\r\n  }\r\n\r\n  addCardToDeck(card: Data) {\r\n\r\n    if(this.checkIfHas4CardsWithSameNameAdded(card))\r\n    return;\r\n\r\n    this.cards.map((c: Data) => {\r\n      if(card.id === c.id) {\r\n        c.isCardSelected = !c.isCardSelected;\r\n      }\r\n    });\r\n\r\n    this.numberOfCardsOnDeck = this.cards.filter((c: Data) => c.isCardSelected).length;\r\n\r\n    this.updateDataSource(this.cards);\r\n  }\r\n\r\n  checkIfHas4CardsWithSameNameAdded(card: Data): boolean {\r\n    this.numberOfCardsWithSameName = this.cards.filter((c: Data) => c.isCardSelected && card.name === c.name).length;\r\n    if(this.numberOfCardsWithSameName >= 4 && !card.isCardSelected) {\r\n      this.openSnackBar('You can only add 4 cards with the same name!');\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  updateDataSource(cards: Array<Data>) {\r\n    // this.dataSource = new MatTableDataSource<Data>();\r\n    // this.dataSource.data = this.cards;\r\n    this.dataSource = new MatTableDataSource<Data>(cards);\r\n    this.dataSource.filter = this.filterValue;\r\n  }\r\n\r\n  createDeck() {\r\n    let deck: Ideck = {\r\n      cards: this.cards.filter((c: Data) => c.isCardSelected === true),\r\n      name: this.form.value.name,\r\n      userEmail: localStorage.getItem('login') || ''\r\n    };\r\n\r\n    this.$newDeckFormService.createNewDeck(deck).subscribe((response: any) => {\r\n      console.log(response);\r\n    });\r\n  }\r\n\r\n  openSnackBar(message: string) {\r\n    this._snackBar.openFromComponent(SnackBarComponent, {\r\n      duration: this.durationInSeconds * 1000,\r\n      data: {message: message}\r\n    });\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}