{"ast":null,"code":"import { NewdeckFormComponent } from 'src/app/components/newdeckform/newdeckform.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../components/cards/cards.component\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/icon\";\nclass DeckOfCardsComponent {\n  constructor(dialog) {\n    this.dialog = dialog;\n    this.userEmail = \"\";\n  }\n  ngOnInit() {\n    this.getCurrentUser();\n  }\n  getCurrentUser() {\n    this.userEmail = localStorage.getItem('login') || '';\n  }\n  createNewDeck() {\n    const dialogRef = this.dialog.open(NewdeckFormComponent, {\n      width: '100%',\n      height: '90%'\n    });\n    dialogRef.afterClosed().subscribe(result => {});\n  }\n  static #_ = this.ɵfac = function DeckOfCardsComponent_Factory(t) {\n    return new (t || DeckOfCardsComponent)(i0.ɵɵdirectiveInject(i1.MatDialog));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DeckOfCardsComponent,\n    selectors: [[\"app-deckofcards\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"grid\", \"grid-cols-1\", \"bg-amber-400\", \"p-4\"], [1, \"gid\", \"grid-rows-4\", \"grid-flow-col\"], [\"mat-button\", \"\", 3, \"click\"], [3, \"userEmail\"]],\n    template: function DeckOfCardsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function DeckOfCardsComponent_Template_button_click_2_listener() {\n          return ctx.createNewDeck();\n        });\n        i0.ɵɵelementStart(3, \"mat-icon\");\n        i0.ɵɵtext(4, \"create_new_folder\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(5, \" New Deck \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(6, \"app-cards\", 3);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"userEmail\", ctx.userEmail);\n      }\n    },\n    dependencies: [i2.CardComponent, i3.MatButton, i4.MatIcon],\n    styles: [\"/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkZWNrb2ZjYXJkcy5jb21wb25lbnQuc2NzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvZGVja09mQ2FyZHMvZGVja29mY2FyZHMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHdLQUF3SyIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { DeckOfCardsComponent };","map":{"version":3,"names":["NewdeckFormComponent","DeckOfCardsComponent","constructor","dialog","userEmail","ngOnInit","getCurrentUser","localStorage","getItem","createNewDeck","dialogRef","open","width","height","afterClosed","subscribe","result","_","i0","ɵɵdirectiveInject","i1","MatDialog","_2","selectors","decls","vars","consts","template","DeckOfCardsComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","DeckOfCardsComponent_Template_button_click_2_listener","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["E:\\Arquivos de Programas\\SoftwareFactory\\desafio-tecnico\\pokemonapp\\src\\app\\pages\\deckOfCards\\deckofcards.component.ts","E:\\Arquivos de Programas\\SoftwareFactory\\desafio-tecnico\\pokemonapp\\src\\app\\pages\\deckOfCards\\deckofcards.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { NewdeckFormComponent } from 'src/app/components/newdeckform/newdeckform.component';\r\n\r\n@Component({\r\n  selector: 'app-deckofcards',\r\n  templateUrl: './deckofcards.component.html',\r\n  styleUrls: ['./deckofcards.component.scss']\r\n})\r\nexport class DeckOfCardsComponent implements OnInit {\r\n\r\n  public userEmail: string = \"\";\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getCurrentUser();\r\n  }\r\n\r\n  getCurrentUser() {\r\n    this.userEmail = localStorage.getItem('login') || '';\r\n  }\r\n\r\n  createNewDeck() {\r\n      const dialogRef = this.dialog.open(NewdeckFormComponent, {\r\n        width: '100%',\r\n        height: '90%'\r\n      });\r\n\r\n      dialogRef.afterClosed().subscribe((result: any) => {\r\n      });\r\n\r\n  }\r\n\r\n}\r\n","<div class=\"grid grid-cols-1 bg-amber-400 p-4\">\r\n  <div class=\"gid grid-rows-4 grid-flow-col\">\r\n    <button mat-button (click)=\"createNewDeck()\">\r\n      <mat-icon>create_new_folder</mat-icon>\r\n      New Deck\r\n    </button>\r\n  </div>\r\n  <!-- <div class=\"bg-red-300\">\r\n    <img class=\"w-full\" src=\"https://cdn.vox-cdn.com/thumbor/PqAwdNpc7p-5GUCSMxQPehSU-ck=/0x0:1920x1200/1200x800/filters:focal(810x375:1116x681)/cdn.vox-cdn.com/uploads/chorus_image/image/72524797/pikachu_artwork.0.jpg\" alt=\"{{card.name}}\">\r\n    <div class=\"px-6 py-4\">\r\n      <div class=\"font-bold text-xl mb-2\">{{card.name}}</div>\r\n      <p class=\"text-gray-700 text-base\">\r\n        Number of cards: {{card.cards.length}}\r\n      </p>\r\n      <p>\r\n        <button mat-button (click)=\"openDialog(card.id!)\">\r\n          <mat-icon>search</mat-icon>\r\n        </button>\r\n        <button mat-button (click)=\"deleteCard(card.id!)\">\r\n          <mat-icon>cancel</mat-icon>\r\n        </button>\r\n      </p>\r\n    </div>\r\n  </div> -->\r\n</div>\r\n\r\n<app-cards [userEmail]=\"userEmail\"></app-cards>\r\n"],"mappings":"AAEA,SAASA,oBAAoB,QAAQ,sDAAsD;;;;;;AAE3F,MAKaC,oBAAoB;EAI/BC,YAAmBC,MAAiB;IAAjB,KAAAA,MAAM,GAANA,MAAM;IAFlB,KAAAC,SAAS,GAAW,EAAE;EAEW;EAExCC,QAAQA,CAAA;IACN,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAA,cAAcA,CAAA;IACZ,IAAI,CAACF,SAAS,GAAGG,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EACtD;EAEAC,aAAaA,CAAA;IACT,MAAMC,SAAS,GAAG,IAAI,CAACP,MAAM,CAACQ,IAAI,CAACX,oBAAoB,EAAE;MACvDY,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE;KACT,CAAC;IAEFH,SAAS,CAACI,WAAW,EAAE,CAACC,SAAS,CAAEC,MAAW,IAAI,CAClD,CAAC,CAAC;EAEN;EAAC,QAAAC,CAAA,G;qBAvBUhB,oBAAoB,EAAAiB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,SAAA;EAAA;EAAA,QAAAC,EAAA,G;UAApBrB,oBAAoB;IAAAsB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCTjCX,EAAA,CAAAa,cAAA,aAA+C;QAExBb,EAAA,CAAAc,UAAA,mBAAAC,sDAAA;UAAA,OAASH,GAAA,CAAArB,aAAA,EAAe;QAAA,EAAC;QAC1CS,EAAA,CAAAa,cAAA,eAAU;QAAAb,EAAA,CAAAgB,MAAA,wBAAiB;QAAAhB,EAAA,CAAAiB,YAAA,EAAW;QACtCjB,EAAA,CAAAgB,MAAA,iBACF;QAAAhB,EAAA,CAAAiB,YAAA,EAAS;QAqBbjB,EAAA,CAAAkB,SAAA,mBAA+C;;;QAApClB,EAAA,CAAAmB,SAAA,GAAuB;QAAvBnB,EAAA,CAAAoB,UAAA,cAAAR,GAAA,CAAA1B,SAAA,CAAuB;;;;;;;SDjBrBH,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}